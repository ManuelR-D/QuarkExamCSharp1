using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ExamenModuloC.Model;
using ExamenModuloC.Model.Builders;
using ExamenModuloC.Model.Director;
using ExamenModuloC.Model.Enums;
using ExamenModuloC.Model.Prendas;
using ExamenModuloC.Model.Interface;
using System.Data.SqlClient;

namespace ExamenModuloC.Start
{
    internal class Starter
    {
        private List<IPrenda> initialStock = new List<IPrenda>();
        private ITiendaDTO fakeStore;
        private IVendedorDTO saulGoodMan;
        public void start()
        {
            this.createTablesIfNeeded();
            this.freshStart();
            fakeStore = this.createFakeStore();
            this.createInitialStock();
            saulGoodMan = this.createSaulGoodman();
        }

        private void createTablesIfNeeded()
        {
            using (SqlConnection connection = new SqlConnection(Program.CONNECTION_STRING))
            {
                connection.Open();
                #region CREATE_TIENDA_TABLE
                //Autogenerated script for table creation by Microsoft SQL Server Management Studio
                String query = @"
                SET ANSI_NULLS ON
                
                SET QUOTED_IDENTIFIER ON
                
                IF OBJECT_ID(N'dbo.tienda', N'U') IS NULL BEGIN 
                CREATE TABLE [dbo].[tienda](
	                [id] [bigint] IDENTITY(1,1) NOT NULL,
	                [name] [varchar](50) NOT NULL,
	                [address] [varchar](50) NOT NULL,
                     CONSTRAINT [PK_tienda] PRIMARY KEY CLUSTERED 
                    (
	                    [id] ASC
                    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
                ) ON [PRIMARY]
                END;";
                SqlCommand cmd = new SqlCommand(query, connection);
                cmd.ExecuteNonQuery();
                #endregion CREATE_TIENDA_TABLE
                #region CREATE_PRENDA_TABLE
                query = @"
                SET ANSI_NULLS ON

                SET QUOTED_IDENTIFIER ON

                IF OBJECT_ID(N'dbo.prenda', N'U') IS NULL BEGIN 
                CREATE TABLE [dbo].[prenda](
	                [id] [bigint] IDENTITY(1,1) NOT NULL,
	                [prenda] [nvarchar](max) NOT NULL,
	                [idTienda] [bigint] NULL,
                 CONSTRAINT [PK_prenda] PRIMARY KEY CLUSTERED 
                (
	                [id] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
                ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
                END;
                
                IF OBJECT_ID(N'dbo.prenda', N'U') IS NULL BEGIN
                ALTER TABLE [dbo].[prenda]  WITH CHECK ADD  CONSTRAINT [FK_prenda_tienda] FOREIGN KEY([idTienda])
                REFERENCES [dbo].[tienda] ([id])
                END;

                IF OBJECT_ID(N'dbo.prenda', N'U') IS NULL BEGIN
                ALTER TABLE [dbo].[prenda] CHECK CONSTRAINT [FK_prenda_tienda]
                END;";
                cmd = new SqlCommand(query, connection);
                cmd.ExecuteNonQuery();
                #endregion CREATE_PRENDA_TABLE
                #region CREATE_VENDEDOR_TABLE
                query = @"
                SET ANSI_NULLS ON

                SET QUOTED_IDENTIFIER ON

                IF OBJECT_ID(N'dbo.vendedor', N'U') IS NULL BEGIN
                CREATE TABLE [dbo].[vendedor](
	                [id] [bigint] IDENTITY(1,1) NOT NULL,
	                [name] [varchar](50) NOT NULL,
	                [lastName] [varchar](50) NOT NULL,
	                [workplaceId] [bigint] NOT NULL,
                 CONSTRAINT [PK_vendedor] PRIMARY KEY CLUSTERED 
                (
	                [id] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
                ) ON [PRIMARY]
                END;

                IF OBJECT_ID(N'dbo.vendedor', N'U') IS NULL BEGIN
                ALTER TABLE [dbo].[vendedor]  WITH CHECK ADD  CONSTRAINT [FK_vendedor_tienda] FOREIGN KEY([workplaceId])
                REFERENCES [dbo].[tienda] ([id])
                END;

                IF OBJECT_ID(N'dbo.vendedor', N'U') IS NULL BEGIN
                ALTER TABLE [dbo].[vendedor] CHECK CONSTRAINT [FK_vendedor_tienda]
                END;";
                cmd = new SqlCommand(query, connection);
                cmd.ExecuteNonQuery();
                #endregion CREATE_VENDEDOR_TABLE
                #region CREATE_COTIZACION_TABLE
                query = @"
                SET ANSI_NULLS ON

                SET QUOTED_IDENTIFIER ON

                IF OBJECT_ID(N'dbo.cotizacion', N'U') IS NULL BEGIN
                CREATE TABLE [dbo].[cotizacion](
	                [id] [bigint] IDENTITY(1,1) NOT NULL,
	                [dateTime] [datetime] NOT NULL,
	                [idVendedor] [bigint] NOT NULL,
	                [prenda] [nvarchar](max) NOT NULL,
	                [amount] [int] NOT NULL,
	                [total] [float] NOT NULL,
                 CONSTRAINT [PK_cotizacion] PRIMARY KEY CLUSTERED 
                (
	                [id] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
                ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
                END;

                IF OBJECT_ID(N'dbo.cotizacion', N'U') IS NULL BEGIN
                ALTER TABLE [dbo].[cotizacion]  WITH CHECK ADD  CONSTRAINT [FK_cotizacion_vendedor] FOREIGN KEY([idVendedor])
                REFERENCES [dbo].[vendedor] ([id])
                END;

                IF OBJECT_ID(N'dbo.cotizacion', N'U') IS NULL BEGIN
                ALTER TABLE [dbo].[cotizacion] CHECK CONSTRAINT [FK_cotizacion_vendedor]
                END;";
                cmd = new SqlCommand(query, connection);
                cmd.ExecuteNonQuery();
                #endregion CREATE_COTIZACION_TABLE
            }
        }

        private void freshStart()
        {
            using (SqlConnection connection = new SqlConnection(Program.CONNECTION_STRING))
            {
                connection.Open();
                String query = @"
                DELETE FROM dbo.cotizacion;                
                DELETE FROM dbo.vendedor; 
                DELETE FROM dbo.prenda;                
                DELETE FROM dbo.tienda;
                DBCC CHECKIDENT(vendedor, RESEED, 0)
                DBCC CHECKIDENT(tienda, RESEED, 0)
                DBCC CHECKIDENT(cotizacion, RESEED, 0)
                DBCC CHECKIDENT(prenda, RESEED, 0)";
                SqlCommand cmd = new SqlCommand(query, connection);
                cmd.ExecuteNonQuery();
            }
        }

        private IVendedorDTO createSaulGoodman()
        {
            Vendedor v = new Vendedor("Saul", "GoodMan", fakeStore.Id);
            VendedorDaoMySQL dao = new VendedorDaoMySQL(Program.CONNECTION_STRING);
            return dao.save(v);
        }

        private ITiendaDTO createFakeStore()
        {
            Tienda t = new Tienda("FakeStore", "Wonderland", initialStock);
            TiendaDaoMySQL daoStore = new TiendaDaoMySQL(Program.CONNECTION_STRING);
            return daoStore.save(t);
        }

        private void createInitialStock()
        {
            createCamisaMangaCorta();
            createCamisaMangaLarga();
            createPantalonChupin();
            createPantalonComun();
        }

        private void createPantalonComun()
        {
            PantalonBuilder pantalonBuilder = new PantalonBuilder();
            PrendaDirector prendaDirector = new PrendaDirector(pantalonBuilder);
            prendaDirector.addSubType(PrendaSubType.Comun);
            createStandardAndPremium(pantalonBuilder, prendaDirector, 250);
        }

        private void createPantalonChupin()
        {
            PantalonBuilder pantalonBuilder = new PantalonBuilder();
            PrendaDirector prendaDirector = new PrendaDirector(pantalonBuilder);
            prendaDirector.addSubType(PrendaSubType.Chupin);
            createStandardAndPremium(pantalonBuilder, prendaDirector, 750);
        }

        private void createCamisaMangaLarga()
        {
            CamisaBuilder camisaBuilder = new CamisaBuilder();
            PrendaDirector prendaDirector = new PrendaDirector(camisaBuilder);
            prendaDirector.addSubType(PrendaSubType.MangaLarga);
            prendaDirector.addSubType(PrendaSubType.CuelloMao);
            createStandardAndPremium(camisaBuilder, prendaDirector, 75);
            prendaDirector.removeSubType(PrendaSubType.CuelloMao);
            prendaDirector.addSubType(PrendaSubType.CuelloComun);
            createStandardAndPremium(camisaBuilder, prendaDirector, 175);
        }

        private void createCamisaMangaCorta()
        {
            CamisaBuilder camisaBuilder = new CamisaBuilder();
            PrendaDirector prendaDirector = new PrendaDirector(camisaBuilder);
            prendaDirector.addSubType(PrendaSubType.MangaCorta);
            prendaDirector.addSubType(PrendaSubType.CuelloMao);
            createStandardAndPremium(camisaBuilder, prendaDirector, 100);
            prendaDirector.removeSubType(PrendaSubType.CuelloMao);
            prendaDirector.addSubType(PrendaSubType.CuelloComun);
            createStandardAndPremium(camisaBuilder, prendaDirector, 150);
        }

        private void createStandardAndPremium(IPrendaBuilder camisaBuilder, PrendaDirector prendaDirector, int amount)
        {
            PrendaDaoMySQL dao = new PrendaDaoMySQL(Program.CONNECTION_STRING);
            prendaDirector.makeStandard();
            IPrenda prenda = camisaBuilder.getResult();
            prenda.Stock = amount;
            prenda = dao.save(prenda);
            dao.setTienda(fakeStore.Id, prenda);
            initialStock.Add(prenda);

            prendaDirector.makePremium();
            prenda = camisaBuilder.getResult();
            prenda.Stock = amount;
            prenda = dao.save(prenda);
            dao.setTienda(fakeStore.Id, prenda);
            initialStock.Add(prenda);
        }
    }
}
